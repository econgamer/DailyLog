[
  {
    "id": "1",
    "name": "main.js",
    "content": "console.log(\"Hello\");"
  },
  {
    "name": "quiz1.js",
    "content": "function sameFrequency(num1, num2){\n  var string1 = num1.toString();\n  var string2 = num2.toString();\n  Count = {};\n  //console.log(\"string1.length is: \" + string1.length);\n  for(let i = 0; i < string1.length; i++){\n      if(Count[string1[i]] !== undefined){\n          Count[string1[i]] += 1;\n      }else{\n          //console.log(\"good\");\n          Count[string1[i]] = 1;\n      }\n  }\n  \n  for(let i = 0; i < string2.length; i++){\n      if(Count[string2[i]] == undefined || !Count[string2[i]]){\n          //console.log(\"false value is: \" + Count[string2[i]]);\n          return false;\n      }else{\n          Count[string2[i]] -= 1;\n      }\n  }\n\n  console.log(\"Count is equal to: \" + Count[8]);\n\n  return true;\n  // good luck. Add any arguments you deem necessary.\n}\n\nconsole.log(sameFrequency(182,281));\nconsole.log(sameFrequency(34, 14));\nconsole.log(sameFrequency(3589578, 5879385));\nconsole.log(sameFrequency(22, 222));"
  },
  {
    "name": "quiz2.js",
    "content": "function areThereDuplicates(...args) {\n    var counter = {};\n    //console.log(\"args length is: \" + args);\n    for(var i = 0; i < args.length; i++)\n    {\n        //console.log(\"loop: \" + i);\n        if(counter[args[i]] !== undefined)\n        {\n            return true;\n        }else\n        {\n        //  console.log(\"trigger\");\n          counter[args[i]] = true;  \n        }\n    }\n\n\n  return false;\n  // good luck. (supply any arguments you deem necessary.)\n}\n\nconsole.log(areThereDuplicates(1,2,3));\nconsole.log(areThereDuplicates(1,2,2));\nconsole.log(areThereDuplicates('a','b','c','a'));"
  },
  {
    "name": "quiz2_2.js",
    "content": "function areThereDuplicates(...args) {\n    var counter = {};\n    var j = args.length;\n    //console.log(\"args length is: \" + args);\n    for(var i = 0; i < args.length; i++)\n    {\n        if(args[i] !== args[j])\n        {\n            j -= 1;\n        }else{\n            return true;\n        }\n    }\n\n\n  return false;\n  // good luck. (supply any arguments you deem necessary.)\n}\n\nconsole.log(areThereDuplicates(1,2,3));\nconsole.log(areThereDuplicates(1,2,2));\nconsole.log(areThereDuplicates('a','b','c','a'));"
  },
  {
    "name": "quiz2_bonus",
    "content": "function areThereDuplicates() {\n  console.log(\"size:\" + new Set(arguments).size);\n  console.log(\"size:\" + arguments.length);\n  return new Set(arguments).size !== arguments.length;\n}\n\nconsole.log(areThereDuplicates(1,2,3));\nconsole.log(areThereDuplicates(1,2,2));\nconsole.log(areThereDuplicates('a','b','c','a'));"
  },
  {
    "name": "ce_5.js",
    "content": "function averagePair(arr1, avg){\n  j = 0;\n  i = 1;\n\n  while(i > j && i < arr1.length)\n  {\n    if((arr1[i] + arr1[j])/2 == avg){\n        return true;\n    }\n\n    if(i == arr1.length - 1)\n    {\n        j += 1;\n        i = j + 1;\n        continue;\n    }\n    i++;\n  }\n\n  return false;\n\n\n}\n\n\nconsole.log(\"result1: \" + averagePair([1,2,3],2.5)); //true\nconsole.log(\"result2: \" + averagePair([1,3,3,5,6,7,10,12,19],8)); //true\nconsole.log(\"result3: \" + averagePair([-1,0,3,4,5,6], 4.1));   //false\nconsole.log(\"result4: \" + averagePair([], 4)); //false"
  },
  {
    "name": "ce_6.js",
    "content": "//isSubsequence('hello', 'hello world');    //true\n//isSubsequence('sing', 'sting');   //true\n//isSubsequence('abc', 'abracadabra');  //true\n//isSubsequence('abc', 'acb');  //false (order matters)\n\n//mine\n//isSubsequence('cddbe', 'acfgdbdbe')   //true\n\nfunction isSubsequence(str1, str2){\n    \n    let firstIndex = 0;\n    //let secondIndex = 0;\n\n    for(var secondIndex = 0; secondIndex < str2.length; secondIndex ++)\n    {\n        if(str1[firstIndex] == str2[secondIndex])\n        {\n            firstIndex ++;\n            if(firstIndex > str1.length - 1)\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n\n\nconsole.log(\"result1: \" + isSubsequence('hello', 'hello world'));    //true\nconsole.log(\"result2: \" + isSubsequence('sing', 'sting'));   //true\nconsole.log(\"result3: \" + isSubsequence('abc', 'abracadabra'));  //true\nconsole.log(\"result4: \" + isSubsequence('abc', 'acb'));  //false (order matters)\nconsole.log(\"result5: \" + isSubsequence('cddbe', 'acfgdbdbe'));   //true\nconsole.log(\"result6a: \" + isSubsequence('adg', 'daaaaaahg'));   //false\nconsole.log(\"result6b: \" + isSubsequence('adg', 'daaaaaadg'));   //true"
  },
  {
    "name": "ce_7.js",
    "content": "//maxSubarraySum([100,200,300,400], 2)  //700\n//maxSubarraySum([1,4,2,10,23,3,1,0,20], 4) //39\n//maxSubarraySum([-3,4,0,-2,6,-1], 2)   //5\n//maxSubarraySum([3,-2,7,-4,1,-1,4,-2,1],2) //5\n//maxSubarraySum([2,3], 3)  //null\n\nfunction maxSubarraySum(arr1, num){\n    let tempSum = 0;\n    let currentSum;\n    let maximumSum = 0;\n    \n    if(num > arr1.length){\n        return null;\n    }\n\n    for(var i = 0; i < num; i++){\n        tempSum += arr1[i]\n    }\n    //console.log(\"tempSum\" + tempSum);\n    maximumSum = tempSum;\n    for(var i = num; i < arr1.length; i++){\n//        console.log(\"tempSum : \" + tempSum);\n        currentSum = tempSum - arr1[i-num] + arr1[i];\n//         console.log(\"currentSum : \" + i);\n//         console.log(\"arr1[i-num] : \" + arr1[i-num]);\n//         console.log(\"arr1[num] : \" + arr1[num]);\n        maximumSum = Math.max(currentSum, maximumSum);\n        tempSum = currentSum;\n    }\n\n    return maximumSum;\n\n}\n\n\nconsole.log(\"result 1 : \" + maxSubarraySum([100,200,300,400], 2));  //700\nconsole.log(\"result 2 : \" + maxSubarraySum([1,4,2,10,23,3,1,0,20], 4)); //39\nconsole.log(\"result 3 : \" + maxSubarraySum([-3,4,0,-2,6,-1], 2));   //5\nconsole.log(\"result 4 : \" + maxSubarraySum([3,-2,7,-4,1,-1,4,-2,1],2)); //5\nconsole.log(\"result 5 : \" + maxSubarraySum([2,3], 3));  //null\n\n\n\n"
  },
  {
    "name": "ce_8.js",
    "content": "function minSubArrayLen(arr1, num){\n   \n   let initSum = 0;\n   let initIndex = 0;\n   let minIndex = 0;\n   let startingIndex = 0;\n   let resultLength = 0;\n   \n   for(var i = 0; i < arr1.length; i++)\n   {\n       if(initSum < num)\n       {\n           initSum += arr1[i];\n           initIndex = i + 1;\n       }else{\n           break;\n       }\n        \n   }\n\n   minIndex = initIndex;\n\n    for(var i = initIndex; i <= arr1.length; i++)\n    {\n\n        //console.log(initSum);\n\n        while(initSum >= num){\n            initSum -= arr1[startingIndex];\n            startingIndex++;\n            minIndex--;\n            \n            //console.log(\"minIndex --: \" + minIndex);\n            if(initSum >= num)\n            {\n                resultLength = minIndex;\n            }\n        }\n    \n        if(initSum < num){\n            initSum += arr1[i];\n            minIndex++;\n\n            //console.log(\"minIndex ++: \" + minIndex);\n\n        }\n\n    }\n\n\n   //console.log(\"initindex:\" + minIndex);\n    return resultLength;\n}\n\nconsole.log(\"Result1: \" + minSubArrayLen([2,3,1,2,4,3], 7));\nconsole.log(\"Result2: \" + minSubArrayLen([2,1,6,5,4], 9));\nconsole.log(\"Result3: \" + minSubArrayLen([3,1,7,11,2,9,8,21,62,33,19], 52));\nconsole.log(\"Result4: \" + minSubArrayLen([1,4,16,22,5,7,8,9,10], 39));\nconsole.log(\"Result5: \" + minSubArrayLen([1,4,16,22,5,7,8,9,10],55));\nconsole.log(\"Result6: \" + minSubArrayLen([4,3,3,8,1,2,3],11));\nconsole.log(\"Result7: \" + minSubArrayLen([1,4,16,22,5,7,8,9,10],95));"
  },
  {
    "name": "ce_9.js",
    "content": "function findLongestSubstring(str1){\n  // add whatever parameters you deem necessary - good luck!\n\n  let counter = {};\n  let initialStr = '';\n  let longestLength = 0;\n  let startIndex = 0;\n\n  for(var i = 0; i < str1.length ; i++){\n    if(counter[str1[i]] !== undefined)\n    {\n        let length = i - startIndex;  //1 is not required, as i is the next index already\n        longestLength = Math.max(length, longestLength);\n        i = counter[str1[i]] + 1;\n        startIndex = i;\n        \n        //console.log(\"startIndex is: \" + startIndex);\n        counter = {};\n    }\n    \n    counter[str1[i]] = i;\n    initialStr += str1[i];\n    \n    if(i == (str1.length - 1))\n    {\n//       console.log(\"i= \" + i);\n//       console.log(\"startIndex= \" + startIndex);\n      let length = i - startIndex + 1;    //1 is the inclusion of the startIndex\n      longestLength = Math.max(length, longestLength);\n    }\n    \n\n  }\n\n    return longestLength;\n}\n\n\nconsole.log(\"result1: \" + findLongestSubstring('rithmschool'));\nconsole.log(\"result2: \" + findLongestSubstring('thisisawesome'));\nconsole.log(\"result3: \" + findLongestSubstring('thecatinthehat'));\nconsole.log(\"result4: \" + findLongestSubstring('bbbbbbbb'));\nconsole.log(\"result5: \" + findLongestSubstring('longestsubstring'));\nconsole.log(\"result6: \" + findLongestSubstring('thisisshowwedoit'));"
  },
  {
    "name": "ce_10.js",
    "content": "function power(val, num){\n    if(num === 0) return 1;\n    \n    return val * power(val, num - 1);\n}\n\n\nconsole.log(\"result1: \" + power(2,0));\nconsole.log(\"result2: \" + power(2,4));"
  },
  {
    "name": "ce_11.js",
    "content": "//factorial(1) // 1\n// factorial(2) // 2\n// factorial(4) // 24\n// factorial(7) // 5040\n\nfunction factorial(val){\n    if (val === 0) return 1;\n    return val * factorial(val - 1);\n}\n\n\nconsole.log(\"result 1: \" + factorial(1));\nconsole.log(\"result 2: \" + factorial(2));\nconsole.log(\"result 3: \" + factorial(4));\nconsole.log(\"result 4: \" + factorial(7));"
  },
  {
    "name": "ce_12.js",
    "content": "// productOfArray([1,2,3]) // 6\n// productOfArray([1,2,3,10]) // 60\n\nfunction productOfArray(arr){\n    if(arr.length === 0) return 1;\n    return arr[0] * productOfArray(arr.slice(1))\n}\n\n\nconsole.log(\"result1: \" + productOfArray([1,2,3]));\nconsole.log(\"result2: \" + productOfArray([1,2,3,10]));"
  },
  {
    "name": "ce_13.js",
    "content": "// SAMPLE INPUT/OUTPUT\n// recursiveRange(6) // 21\n// recursiveRange(10) // 55 \n\nfunction recursiveRange(val){\n    if(val === 1) return 1;\n    return val + recursiveRange(val - 1);\n}\n\n\nconsole.log(\"result1: \" + recursiveRange(6));\nconsole.log(\"result2: \" + recursiveRange(10));"
  },
  {
    "name": "ce_14.js",
    "content": "function fib(num){\n    if(num === 1) return 1;\n    if(num == 2) return 1;\n    \n    return fib(num - 1) + fib(num - 2)\n}\n\n// fib(4) // 3\n\nconsole.log(\"result: \" + fib(6));"
  },
  {
    "name": "ce_15.js",
    "content": "function reverse(str1){\n  if(str1.length === undefined) return \"\";\n  var strLength = str1.length;\n   console.log(strLength);\n//   console.log(str1[strLength - 1]);\n   console.log(str1.slice(0,strLength - 1));\n\n  return str1[str1.length] + reverse(str1.slice(0,strLength - 1));\n  //return true;\n}\n\nreverse('awesome');\n\n// reverse('awesome') // 'emosewa'\n// reverse('rithmschool') // 'loohcsmhtir'"
  },
  {
    "name": "ce_15_2.js",
    "content": "function reverse(str1){\n  if(str1.length === 0) return \"\";\n  var strLength = str1.length;\n  return str1[str1.length - 1] + reverse(str1.slice(0,strLength - 1));\n}\n\nreverse('awesome');\nreverse('rithmschool');\n\n// reverse('awesome') // 'emosewa'\n// reverse('rithmschool') // 'loohcsmhtir'"
  },
  {
    "name": "ce_16.js",
    "content": "// isPalindrome('awesome') // false\n// isPalindrome('foobar') // false\n// isPalindrome('tacocat') // true\n// isPalindrome('amanaplanacanalpanama') // true\n// isPalindrome('amanaplanacanalpandemonium') // false\n\nfunction isPalindrome(str1){\n  // add whatever parameters you deem necessary - good luck!\n  if(str1[str1.length - 1] !== str1[0]) return false;\n  if(str1.length === 1) return true;\n\n  var strLength = str1.length;\n\n  return isPalindrome(str1.slice(1, strLength - 1));\n\n}\n\nconsole.log(\"result1: \" + isPalindrome('awesome')); // false\nconsole.log(\"result1: \" + isPalindrome('foobar')); // false\nconsole.log(\"result1: \" + isPalindrome('tacocat')); // true\nconsole.log(\"result1: \" + isPalindrome('amanaplanacanalpanama')); // true\nconsole.log(\"result1: \" + isPalindrome('amanaplanacanalpandemonium')); // false"
  },
  {
    "name": "ce_17.js",
    "content": "// SAMPLE INPUT / OUTPUT\n// const isOdd = val => val % 2 !== 0;\n\n// someRecursive([1,2,3,4], isOdd) // true\n// someRecursive([4,6,8,9], isOdd) // true\n// someRecursive([4,6,8], isOdd) // false\n// someRecursive([4,6,8], val => val > 10); // false\n\n//const isOdd = val => val % 2 !== 0;\n\nfunction someRecursive(arr1, fun1){\n\n  if(arr1.length === 0) return false;\n  if(fun1(arr1[0])) return true;\n\n  return someRecursive(arr1.slice(1), fun1);\n//   if(!fun1(arr1)) return false\n\n//   return someRecursive(arr1.slice(1), fun1);\n  // add whatever parameters you deem necessary - good luck!\n}\n\nconsole.log(\"result 1: \" + someRecursive([1,2,3,4], isOdd));\nconsole.log(\"result 2: \" + someRecursive([4,6,8,9], isOdd));\nconsole.log(\"result 3: \" + someRecursive([4,6,8], isOdd));\nconsole.log(\"result 4: \" + someRecursive([4,6,8], val => val < 10));"
  },
  {
    "name": "ce_18.js",
    "content": "// function flatten(arr1){\n//   // add whatever parameters you deem necessary - good luck!\n//   if(arr1.length === 0) return [];\n  \n//   var newArray1 = [];\n\n//   for(var i = 0; i < arr1.length; i++){\n//       if(arr1[i].length === undefined){\n//         newArray1 += arr1[i];\n//       }else{\n//         newArray1 += flatten(arr1[i]);\n//       }\n\n//   }\n\n//   return newArray1;\n//   //return arr1[0].concat(flatten(arr1.slice(1)));\n// }\n\n\n\n\nfunction flatten(arr1){\n  // add whatever parameters you deem necessary - good luck!\n  console.log(\"testing run\");\n  if(arr1.length === 0) return [];\n  console.log(\"testing run2: \" + arr1);\n  \n  var newArray1 = [];\n\n  for(var i = 0; i < arr1.length; i++){\n      if(arr1[i].length === undefined){\n        newArray1 = newArray1.concat(arr1[i]);\n        console.log(\"testing run3: \" + arr1[i]);\n        console.log(\"testing run4: \" + newArray1);\n      }else{\n        newArray1 = newArray1.concat(flatten(arr1[i]));\n      }\n\n  }\n\n  console.log(\"newArray1: \" + newArray1);\n\n  return newArray1;\n  //return arr1[0].concat(flatten(arr1.slice(1)));\n}\n\nconsole.log(\"testing\", [].concat(2));\n\n\n flatten([1, 2, 3, [4, 5] ]) // [1, 2, 3, 4, 5]\n// flatten([1, [2, [3, 4], [[5]]]]) // [1, 2, 3, 4, 5]\n// flatten([[1],[2],[3]]) // [1,2,3]\n// flatten([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]) // [1,2,3"
  },
  {
    "name": "ce_19.js",
    "content": "function capitalizeFirst (arr1) {\n  // add whatever parameters you deem necessary - good luck!\n  if(arr1.length === 0) return [];\n\n  var newArray = [];\n    \n\n  var newChar = arr1[0].charAt(0).toUpperCase() + arr1[0].slice(1);\n  arr1[0] = newChar;\n  newArray.push(arr1[0]);\n  console.log(\"arr1[0] is equal to: \" + arr1[0]);\n    \n  console.log(\"newArray: \" + newArray);\n  return newArray.concat(capitalizeFirst(arr1.slice(1)));\n}\n\n// capitalizeFirst(['car','taco','banana']); // ['Car','Taco','Banana']\n\n\ncapitalizeFirst(['car','taco','banana']);"
  },
  {
    "name": "ce_20.js",
    "content": "function nestedEvenSum (obj1) {\n  // add whatever parameters you deem necessary - good luck!\n  var sumOfOdd = 0;\n\n  Object.keys(obj1).forEach(key => {\n     //console.log(key, obj1[key]);\n     if(typeof(obj1[key]) === 'object')\n     {\n         sumOfOdd += nestedEvenSum(obj1[key]);\n     }\n\n     if(typeof(obj1[key]) === 'number')\n     {\n         if(obj1[key] % 2 === 0)\n         {\n            sumOfOdd += obj1[key];\n         }\n         \n     }\n     \n  });\n\n  return sumOfOdd;\n\n}\n\n\nvar obj1 = {\n  outer: 2,\n  obj: {\n    inner: 2,\n    otherObj: {\n      superInner: 2,\n      notANumber: true,\n      alsoNotANumber: \"yup\"\n    }\n  }\n}\n\nvar obj2 = {\n  a: 2,\n  b: {b: 2, bb: {b: 3, bb: {b: 2}}},\n  c: {c: {c: 2}, cc: 'ball', ccc: 5},\n  d: 1,\n  e: {e: {e: 2}, ee: 'car'}\n};\n\n//nestedEvenSum(obj1); // 6\nnestedEvenSum(obj2); // 10"
  },
  {
    "name": "ce_21.js",
    "content": "function capitalizeWords (arr) {\n  // add whatever parameters you deem necessary - good luck!\n  if(arr.length === 0) return [];\n\n  var newArray = [];\n  newArray[0] = arr[0].toUpperCase();\n  \n\n  return newArray.concat(capitalizeWords(arr.slice(1)));\n}\n\nlet words = ['i', 'am', 'learning', 'recursion'];\n// capitalizeWords(words); // ['I', 'AM', 'LEARNING', 'RECURSION']\n\nconsole.log(capitalizeWords(words));"
  },
  {
    "name": "ce_22.js",
    "content": "function stringifyNumbers (obj1) {\n  // add whatever parameters you deem necessary - good luck!\n\n  var newObject = {};\n  \n  if(obj1.length === 0 )\n  {\n      return {};\n  };\n  //if(obj1 === undefined) return {};\n\n  Object.keys(obj1).forEach(key => {\n     //console.log(key, obj1[key]);\n     //console.log(\"typeof(obj1[key]): \" + typeof(obj1[key]));\n     if(typeof(obj1[key]) === 'object')\n     {\n         newObject[key] = stringifyNumbers(obj1[key]);\n     }else if(typeof(obj1[key]) === 'number')\n     {\n        console.log(\"key is: \" + key);\n        newObject[key] = obj1[key].toString();\n        //console.log(\"typeOf is: \" +  typeof(newObject[key]));\n         \n     }else{\n         newObject[key] = obj1[key];\n         //console.log(\"others\");\n     }\n     \n\n  });\n  \n  if(newObject[\"random\"]){\n      var n = newObject[\"random\"].toString();\n\n      //console.log(\"typeOf is: \" +  typeof(newObject[\"random\"]));\n\n     // console.log(\"newObject is: \" +  newObject[\"random\"].toString() + typeof(n));\n  }\n  \n\n  return newObject;\n\n}\n\nlet obj = {\n    num: 1,\n//     test: [],\n    data: {\n        val: 4,\n        info: {\n            isRight: true,\n            random: 66\n        }\n    }\n}\n\n\n\nstringifyNumbers(obj);\n\n/*\n{\n    num: \"1\",\n    test: [],\n    data: {\n        val: \"4\",\n        info: {\n            isRight: true,\n            random: \"66\"\n        }\n    }\n}\n*/"
  },
  {
    "name": "ce_23.js",
    "content": "\nfunction collectStrings (obj1) {\n  // add whatever parameters you deem necessary - good luck!\n  var newArray = [];\n\n  Object.keys(obj1).forEach(key => {\n     \n\n//     console.log(\"typeOf: \" + typeof(obj1[key]));\n     if(typeof(obj1[key]) === 'object')\n     {\n         newArray = newArray.concat(collectStrings(obj1[key]));\n     }\n\n     if(typeof(obj1[key]) === 'string')\n     {\n         console.log(\"goody goody\");\n         newArray.push(obj1[key]);\n     }\n     \n  });\n\n  return newArray;\n\n}\n\n\n// const obj3 = {\n//     stuff: \"foo\",\n//     data: {\n//         val: {\n//             thing: {\n//                 info: \"bar\",\n//                 moreInfo: {\n//                     evenMoreInfo: {\n//                         weMadeIt: \"baz\"\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// }\n\ncollectStrings(obj3) // [\"foo\", \"bar\", \"baz\"])"
  },
  {
    "name": "ce_24.js",
    "content": "function binarySearch(a,b){\n   var leftPointer = 0;\n   var rightPointer = a.length - 1;\n    \n   var middlePointer = Math.floor(a.length/2);\n   var resultIndex = -1;\n\n   var count = 0;\n\n   while(a[resultIndex] != b)\n   {\n       count++;\n       console.log(\"count\" + count);\n       if(b === a[middlePointer]){\n           resultIndex = middlePointer;\n           break;\n       }\n\n       if(b === a[leftPointer]){\n           resultIndex = leftPointer;\n           break;\n       }\n\n       if(b === a[rightPointer]){\n           resultIndex = rightPointer;\n           break;\n       }\n\n       if(middlePointer === leftPointer || middlePointer === rightPointer)\n       {\n           break;\n       }\n\n       if(b > a[middlePointer]){\n           leftPointer = middlePointer + 1;\n           middlePointer = leftPointer + Math.floor((rightPointer - leftPointer)/2);\n       }\n\n       if(b < a[middlePointer]){\n           rightPointer = middlePointer - 1;\n           middlePointer = leftPointer + Math.ceil((rightPointer - leftPointer)/2);\n       }\n\n       \n\n       //middlePointer = leftPointer + Math.floor((rightPointer - leftPointer)/2);\n   }\n   return resultIndex;\n\n  // add whatever parameters you deem necessary - good luck!\n}\n\n\nbinarySearch([1,3,4,6,8,9,11,12,13,14,15,16,17,18,19], 15);\n//binarySearch([1,2,3,4,5], 2)  //1\n//binarySearch([1,2,3,4,5], 3)  //2\n//binarySearch([1,2,3,4,5], 6)  //-1\nbinarySearch([1,2,3,4,5], 5)"
  },
  {
    "name": "naive_string_search.js",
    "content": "function nativeStringSearch(longStr, shortStr)\n{\n    var count = 0;\n    for(var i = 0; i < longStr.length; i++)\n    {\n        for(var k = 0; k < shortStr.length; k++){\n            if(shortStr[k] === longStr[i + k]){\n                \n                if(k === (shortStr.length - 1)){\n                    count++;\n                }\n\n                continue;\n            }\n            break;\n        }\n    }\n\n    return count;\n}\n\n\nnativeStringSearch(\"wowomgzomg\", \"omg\");\nnativeStringSearch(\"lorie loled\", \"lo\");"
  },
  {
    "name": "bubbleSort.js",
    "content": "function bubbleSort(arr){\n    var  noSwaps;\n    for(var i = arr.length - 1; i >= 0; i--){\n//        console.log(\"i = \" + i);\n        noSwaps = true;\n        for(var j = 0; j < i; j++){\n            console.log(\"arr: \" + arr);\n            if(arr[j] > arr[j + 1]){\n                swap(arr, j , j + 1);\n                noSwaps = false;\n//                  var temp = arr[j];\n//                  arr[j] = arr[j+1];\n//                  arr[j+1] = temp;\n                \n            } \n        }\n        console.log(\"one pass complete\");\n\n        if(noSwaps) break;\n    }\n    return arr;\n}\n\n\nfunction swap(arr, index1, index2){\n    var temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n//     return arr;\n}\n\n\nbubbleSort([5,3,4,1,2,14,-1]);"
  },
  {
    "name": "selectionSort.js",
    "content": "function selectionSort(arr){\n    for(var i = 0; i < arr.length; i++){\n        var mini = arr[i];\n        var miniIndex = i;\n        for(var j = i + 1; j < arr.length; j++){\n\n            if(mini > arr[j]){\n                mini = arr[j];\n                miniIndex = j;\n            }\n            if(j === (arr.length - 1) && miniIndex !== i){\n                swap(arr, i, miniIndex);\n            }\n\n        }\n    }\n\n    return arr;\n}\n\n\n\n\nfunction swap(arr, index1, index2){\n    var temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n//     return arr;\n}\n\n\nselectionSort([5,3,4,1,2,14,-1]);"
  },
  {
    "name": "insertionSort.js",
    "content": "function insertionSort(arr){\n    for(var currentIndex = 1; currentIndex < arr.length; currentIndex++){\n        \n        var currentValue = arr[currentIndex];\n        for(var j = (currentIndex - 1); j >= 0; j--){\n            \n\n            \n            if(currentValue < arr[j]){\n                swap(arr, j, j + 1);\n            }\n        }\n\n        console.log(\"array\", arr);\n    }\n\n    return arr;\n}\n\n\nfunction swap(arr, index1, index2){\n    var temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n//     return arr;\n}\n\n\n\n\ninsertionSort([2,1,9,76,0])\n\n\n"
  },
  {
    "name": "mergingArray.js",
    "content": "function merge(left, right){\n    var newArray = [];\n    var i = 0;\n    var j = 0;\n\n    while(i < left.length || j < right.length){\n        if(right[j] === undefined || left[i] < right[j]){\n            newArray.push(left[i]);\n            i++;\n        }else{\n            newArray.push(right[j]);\n            j++\n        }\n    }\n\n    return newArray;\n}\n\n\n// merge([1,10,50],[2,14,99,100]);\nmerge([],[2,14,99,100]);"
  },
  {
    "name": "mergeSort.js",
    "content": "function mergeSort(arr){\n\n    if(arr.length <= 1) return arr;\n    \n    //var newArray = [];\n    var middle = Math.floor(arr.length / 2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n\n//     console.log(\"left: \" + left);\n//     console.log(\"right: \" + right);\n    \n//     newArray.push(left);\n//     newArray.push(right);\n    \n    //newArray = merge(left, right);\n    //console.log(\"newArray\" + newArray);\n    console.log(\"destructure: \" + left, right);\n    \n    return merge(mergeSort(left), mergeSort(right));\n    //return mergeSort(left).concat(mergeSort(right));\n\n}\n\n\n\n\nfunction merge(left, right){\n    var newArray = [];\n    var i = 0;\n    var j = 0;\n\n    while(i < left.length || j < right.length){\n        if(right[j] === undefined || left[i] < right[j]){\n            newArray.push(left[i]);\n            i++;\n        }else{\n            newArray.push(right[j]);\n            j++\n        }\n    }\n\n    console.log(\"newArray: \" + newArray);\n\n    return newArray;\n}\n\n\n//mergeSort([8,3,5,4,7,6,1,2]);\nmergeSort([10,24,76,73,72,1,9]);\n\n// mergeSort([2,14,99,100]);\n\n// merge([1,10,50],[2,14,99,100]);\n//merge([],[2,14,99,100]);"
  },
  {
    "name": "pivot.js",
    "content": "function quickSort(arr, left = 0, right = arr.length - 1){\n    \n    var pivotIndex = pivot(arr, left, right);\n    var distance = pivotIndex - left;\n    var hasRight = right - pivotIndex;\n    \n    console.log(\"hasRight: \" + hasRight);\n    console.log(\"distance: \" + hasRight);\n    \n//     if(distance > 0){\n//         quickSort(arr, 0, pivotIndex);\n//     }\n\n\n//     if(hasRight > 0){\n//         quickSort(arr, pivotIndex + 1, arr.length - 1);\n//     }\n    \n    //better\n    if(distance > 0){\n        quickSort(arr, left, pivotIndex - 1);\n    }\n\n\n    if(hasRight > 0){\n        quickSort(arr, pivotIndex + 1, arr.length - 1);\n    }\n\n\n\n\n//     if(distance > 0){\n//         console.log(\"right side: \" + pivotIndex);\n//         return quickSort(arr, pivotIndex, arr.length - 1);    \n//     }\n    \n\n// //     if(base == 0){\n// //         pivotIndex = pivot(arr, base);\n// //     }\n\n\n// //    var base = pivotIndex + 1;\n    \n\n//     var distance = right - left;\n\n//     console.log(\"left - right: \", distance);\n    \n// //     if(pivotIndex != 0){\n// //         quickSort(arr, left, right);\n// //     }\n\n// //     if(pivotIndex != 0){\n// // //         pivotIndex = pivot(arr, left, right);\n// //         return quickSort(arr, 0, pivotIndex);\n// //     }\n\n//     if(distance > 0){\n//         return quickSort(arr, 0, pivotIndex);\n//     }\n\n\n\n\n// //     if(base < arr.length){\n// //         pivotIndex = pivot(arr, base);\n\n// //         quickSort(arr, base);\n// //     }\n   \n    console.log(\"basePoint: \" + left);\n\n    return arr;\n}\n\n\n\nfunction pivot(arr, start = 0, end = arr.length - 1){\n    var pivotPoint = start;\n\n//    console.log(\"arr start is equal to: \" + arr);\n\n//     console.log(\"end: \" + end);\n//     console.log(\"start: \" + start);\n    \n    for(var i = start + 1; i <= end; i++){\n        if(arr[start] > arr[i]){\n            pivotPoint++;\n            var temp = arr[pivotPoint];\n            arr[pivotPoint] = arr[i];\n            arr[i] = temp;\n        }\n\n        if(i === end){\n            var temp = arr[pivotPoint];\n            arr[pivotPoint] = arr[start];\n            arr[start] = temp;\n        }\n    }\n//    console.log(\"arr is equal to: \" + arr);\n    return pivotPoint;\n}\n\n\n// let arr = [5,2,1,8,4,7,6,3, 9 , 11, 33, 55, 23];\n// let arr = [5,2,1,8,4,7,6,3, 9 , 11, 33, 55, 23];\n\n// let arr = [5,2,1,8,4,7,6,3, 9];\n let arr = [5,2,1,8,4,7,6,3, 9 , 5,2,1,8,4,7,6,3, 9];\n//let arr = [6,10,11,50,43,40,30,42,20,40,19,32,20,41,23,27];\nquickSort(arr, 0);     //4\n\n"
  },
  {
    "name": "radixsortHelper.js",
    "content": "// function getDigit(number, index){\n//     var convertedTostring = number.toString();\n//     var adjustedIndex = convertedTostring.length - index - 1;\n//     console.log(convertedTostring[adjustedIndex]);\n//     if(convertedTostring[adjustedIndex] === undefined){\n//         return 0;\n//     }\n\n//     return convertedTostring[adjustedIndex];\n\n// }\n\nfunction getDigit(num, i){\n    if(num === 0) return 0;\n    return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;\n\n}\n\nfunction digitCount(num){\n    if(num === 0) return 1;\n    return Math.floor(Math.log10(Math.abs(num))) + 1;\n}\n\n\nfunction mostDigits(arr1){\n    var maximum = digitCount(arr1[0]);\n    arr1.forEach(element => {\n        var digitCountNum = digitCount(element);\n\n        if(digitCountNum > maximum){\n            maximum = digitCountNum;\n        }\n    }\n       );\n\n     return maximum;\n}\n\nconsole.log(\"testcase\" + getDigit(10, 1));\n\n\nfunction radixSort(arr){\n    var maxLoop = mostDigits(arr);\n    \n    \n    for(var j = 0; j < maxLoop; j++){\n\n        var emptyBucket = [[],[],[],[],[],[],[],[],[],[]];          //Array.from({length: 10}, () => [])\n\n        for(var i = 0; i < arr.length; i++){\n          \n            var digit = getDigit(arr[i], j);\n\n            emptyBucket[digit].push(arr[i]);\n             \n        }\n        arr = [];\n\n        for(var x  = 0; x < emptyBucket.length; x++){\n            arr = arr.concat(emptyBucket[x]);                   //[].concat(...digitBuckets); !== [].concat([[1],[2],[3]])\n        }\n    \n//         console.log(\"new arr is: \" + arr);\n//         console.log(\"new arr is: \" + arr.length);\n\n    }\n\n    \n    return arr;\n\n\n}\n\nradixSort([10,9680,9420,2030,3221,1,5622,82,4793,743,577,7]);\n\n// getDigit(12345, 0); //5\n// getDigit(12345,1);  //4\n// getDigit(12345,2);  //3\n// getDigit(12345,3);  //2\n// getDigit(12345,4);  //1\n// getDigit(12345,5);  //0\n// getDigit(7323,2);\n// digitCount(0);\n// mostDigits([1234,56,7]);\n// mostDigits([1,1,11111,1]);\n//mostDigits([12,34,56,78]);\n\n//digitCount(25);\n//digitCount(314);"
  },
  {
    "name": "Singly_Linked_List.js",
    "content": "class Node{\n    constructor(val){\n        this.val = val;\n        this.next = null;\n    }\n}\n\nclass SinglyLinkedList{\n    constructor(){\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n\n    push(val){\n        let newNode = new Node(val);\n\n        if(this.length === 0){\n            this.head = newNode;\n            this.tail = newNode;\n        }else{\n            this.tail.next = newNode;\n            this.tail = newNode;\n        }\n        this.length ++;\n        return this;\n    }\n\n\n    pop(){\n\n        if(!this.head) return undefined;\n\n        if(this.tail === this.head){\n            var popNode = this.tail;\n            this.head = null;\n            this.tail = null;\n            this.length --;\n\n            return popNode;\n        }\n\n        let currentNode = this.head;\n        let nextNode = this.head.next;\n        \n        while(nextNode && nextNode.next){\n            currentNode = currentNode.next;\n            nextNode = currentNode.next;\n        }\n        \n        this.tail = currentNode;\n        this.tail.next = null;\n        this.length --;\n\n        return nextNode;\n    }\n\n\n    shift(){\n        if(!this.head) return undefined;\n\n        var shiftNode = this.head;\n        this.head = this.head.next;\n        this.length --;\n\n        if(this.length === 0){\n            this.tail = null;\n        }\n\n        return shiftNode;\n    }\n\n\n    unshift(val){\n        let newNode = new Node(val);\n        newNode.next = this.head;\n        \n        if(!this.head){\n            this.tail = newNode;\n        }\n\n        this.head = newNode;\n        this.length ++;\n\n        return this;\n    }\n\n\n    get(i){\n        if(i < 0 || i >= this.length) { return null; }\n\n        var getTarget = this.head;\n        for(var count = 0; count < i; count++){\n            getTarget = getTarget.next;\n        }\n\n        return getTarget;\n    }\n\n    set(val, index){\n        var nodeToChange = this.get(index);\n        \n        if(nodeToChange){\n            nodeToChange.val = val;\n            return true;\n        }\n\n        return false;\n        \n    }\n\n    \n    insert(val, index){\n        \n\n        if(index <= 0 || index > this.length){\n            return false;\n        }\n\n        if(index === this.length){\n            this.push(val);\n            return true;\n        }\n\n        if(index === 0){\n            this.unshift(val);\n            return true;\n        }\n        \n        let newNode = new Node(val);\n\n        var prev = this.get(index - 1);\n        newNode.next = prev.next;\n        prev.next = newNode;\n        this.length ++;\n        return true;       \n    }\n\n\n    remove(index){\n        if(index < 0 || index >= this.length) return undefined;\n        if(index === this.length - 1) return this.pop();\n        if(index === 0) return this.shift();\n        \n        let prev = this.get(index - 1);\n        let temp = prev.next;\n        prev.next = temp.next;\n        this.length --;\n\n        return temp;\n    }\n\n    reverse(){\n        var headTemp = this.head;\n        this.head = this.tail;\n        this.tail = headTemp;\n\n        var currentNode = this.tail;\n        var nextNode = currentNode.next;\n        currentNode.next = null;\n\n        while(nextNode){\n            var nextTemp = nextNode.next;\n            var currentTemp = nextNode;\n            nextNode.next = currentNode;\n            nextNode = nextTemp;\n            currentNode = currentTemp;\n        }\n\n        nextNode\n        \n        return this;\n\n    }\n\n    print(){\n        var arr = [];\n        var current = this.head;\n        while(current){\n            arr.push(current.val);\n            current = current.next;\n        }\n\n        console.log(arr);\n    }\n\n\n}\n\n\n\nvar list = new SinglyLinkedList()\nlist.push(\"HELLO\")\nlist.push(\"GOODBYE\")\nlist.push(\"!!!!\")\nlist.push(\"1\")\nlist.push(\"2\")\nlist.push(\"3\")\nlist.push(\"4\")\nlist.push(\"5\")\nlist.push(\"6\")\n// list.get(2);\n// list.set(\"dabb\", 1);\n//console.log(\"list: \" + list);\n"
  },
  {
    "name": "Doubly_Linked_List.js",
    "content": "class Node{\n    constructor(val){\n        this.val = val;\n        this.next = null;\n        this.prev = null;\n    }\n}\n\n\nclass DoublyLinkedList{\n    constructor(){\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n\n\n    push(val){\n        var newNode = new Node(val);\n        if(this.length === 0){\n            this.head = newNode;\n            this.tail = newNode;\n        }else{\n            newNode.prev = this.tail;\n            this.tail.next = newNode;\n            this.tail = newNode;\n        }\n\n        this.length ++;\n        return this;\n    }\n\n    pop(){\n        if(this.length === 0) return undefined;\n        \n        var tempTail = this.tail;\n        var tempPrev = this.tail.prev;\n\n        if(this.length === 1) {\n            this.tail = null;\n            this.head = null;\n        }else{\n            this.tail = tempPrev;\n            this.tail.next = null;\n            tempTail.prev = null;\n        }\n\n        this.length --;\n        return tempTail;\n    }\n\n    shift(){\n        if(this.length === 0) return undefined;\n        var oldHead = this.head;\n\n        if(this.length === 1){\n            this.head = null;\n            this.tail = null;\n        }else{\n            this.head = oldHead.next;\n            this.head.prev = null;\n            oldHead.next = null;\n        }\n\n        this.length --;\n        return oldHead;\n    }\n\n    unshift(val){\n        var newNode = new Node(val);\n        \n        if(this.length === 0){\n            this.head = newNode;\n            this.tail = newNode;\n        }else{\n            var tempHead = this.head;\n            this.head = newNode;\n            tempHead.prev = this.head;\n            this.head.next = tempHead;\n        }\n\n        this.length ++;\n        return this;\n    }\n\n    get(index){\n        if(index < 0 || index >= this.length){\n           return null;\n        }\n\n        var returnNode = null;\n        \n        //loop from the tail\n        var fromTail = this.length - index - 1;\n        if(index > fromTail){\n            console.log(\"From TAIL\");\n            returnNode = this.tail;\n            for(var i = 0; i < fromTail; i++){\n                returnNode = this.tail.prev;\n            }\n        }else{\n            console.log(\"From HEAD\");\n            returnNode = this.head;\n            for(var i = 0; i < index; i++){\n                returnNode = this.head.next;\n            }\n        }\n\n        return returnNode;\n    }\n\n\n\n    set(val, index){\n        var returnNode = this.get(index);\n\n        if(returnNode){\n            returnNode.val = val;\n            return true;\n        }\n\n        return false;\n    }\n\n\n    insert(val, index){\n\n        if(index < 0 || index > this.length){\n           return false;\n        }\n        \n        if(index === 0){\n            this.unshift(val);\n        }else if(index === this.length){\n            this.push(val);\n        }else{\n            var newNode = new Node(val);\n            var tempPrevNode = this.get(index - 1);\n            var tempNextNode = tempPrevNode.next;\n            newNode.next = tempNextNode;\n            newNode.prev = tempPrevNode;\n            tempPrevNode.next = newNode;\n            tempNextNode.prev = newNode;\n            this.length ++;\n        }\n\n        return true;\n\n    }\n\n\n    insert(val, index){\n\n        if(index < 0 || index > this.length){\n           return false;\n        }\n        \n        if(index === 0){\n            this.unshift(val);\n        }else if(index === this.length){\n            this.push(val);\n        }else{\n            var newNode = new Node(val);\n            var tempPrevNode = this.get(index - 1);\n            var tempNextNode = tempPrevNode.next;\n            newNode.next = tempNextNode;\n            newNode.prev = tempPrevNode;\n            tempPrevNode.next = newNode;\n            tempNextNode.prev = newNode;\n            this.length ++;\n        }\n\n        return true;\n\n    }\n\n\n    remove(index){\n        if(index < 0 || index >= this.length) return undefined;\n        if(index === 0) return this.shift();\n        if(index === (this.length - 1)) return this.pop();\n\n        var removedNote = this.get(index);\n        var tempNextNode = removedNote.next;\n        var tempPrevNode = removedNote.prev;\n        \n        tempPrevNode.next = tempNextNode;\n        tempNextNode.prev = tempPrevNode;\n\n        removedNote.next = null;\n        removedNote.prev = null;\n\n        this.length --;\n        return removedNote;\n    }\n\n\n}\n\nvar list = new DoublyLinkedList()\nlist.push(\"Hello\");\nlist.push(\"GoodBye\");\nlist.push(\"End\");\n"
  },
  {
    "name": "binarySearchTree.js",
    "content": "class Node{\n    constructor(value){\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinarySearchTree{\n    constructor(){\n        this.root = null;\n    }\n\n\n    insert(val){\n        var newNode = new Node(val);\n        if(!this.root){\n            this.root = newNode;\n            return this;\n        }\n\n        var currentNode = this.root;\n        \n\n        while(currentNode){\n            if(newNode.value === currentNode.value){\n                return undefined;\n            }\n\n            if(newNode.value < currentNode.value){\n                //left-side\n                var nextCheck = currentNode.left;\n\n                if(nextCheck){\n                    currentNode = nextCheck;\n                }else{\n                    currentNode.left = newNode;   \n                    break;\n                }\n            }else{\n                var nextCheck = currentNode.right;\n\n                if(nextCheck){\n                    currentNode = nextCheck;\n                }else{\n                    currentNode.right = newNode;   \n                    break;\n                }\n            }\n\n        }\n        console.log(\"currentNode: \" + currentNode);\n        return this;\n    }\n\n\n    find(val){\n        if(!this.root) return false;\n\n        var currentNode = this.root;\n\n        while(currentNode){\n            if(currentNode.value === val) return currentNode;\n\n            if(val > currentNode.value){\n                currentNode = currentNode.right \n            }else{\n                currentNode = currentNode.left;\n            }\n        }\n\n        return false;\n\n    }\n\n\n\n\n}\n\nvar tree = new BinarySearchTree();\ntree.root = new Node(10);\ntree.insert(15);\ntree.insert(7);\ntree.insert(9);"
  },
  {
    "name": "tree.js",
    "content": "class Node{\n    constructor(value){\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinarySearchTree{\n    constructor(){\n        this.root = null;\n    }\n\n\n    insert(val){\n        var newNode = new Node(val);\n        if(!this.root){\n            this.root = newNode;\n            return this;\n        }\n\n        var currentNode = this.root;\n        \n\n        while(currentNode){\n            if(newNode.value === currentNode.value){\n                return undefined;\n            }\n\n            if(newNode.value < currentNode.value){\n                //left-side\n                var nextCheck = currentNode.left;\n\n                if(nextCheck){\n                    currentNode = nextCheck;\n                }else{\n                    currentNode.left = newNode;   \n                    break;\n                }\n            }else{\n                var nextCheck = currentNode.right;\n\n                if(nextCheck){\n                    currentNode = nextCheck;\n                }else{\n                    currentNode.right = newNode;   \n                    break;\n                }\n            }\n\n        }\n        console.log(\"currentNode: \" + currentNode);\n        return this;\n    }\n\n\n    find(val){\n        if(!this.root) return false;\n\n        var currentNode = this.root;\n\n        while(currentNode){\n            if(currentNode.value === val) return currentNode;\n\n            if(val > currentNode.value){\n                currentNode = currentNode.right \n            }else{\n                currentNode = currentNode.left;\n            }\n        }\n\n        return false;\n\n    }\n\n\n    breadthFirstSearch(){\n        var queue = [];\n        var visited = [];\n        \n        if(!this.root) return visited;\n        queue.push(this.root);\n        var target = this.root;\n\n        while(queue.length > 0){\n            target = queue.shift();\n            if(target.left){\n                queue.push(target.left);\n            }\n\n            if(target.right){\n                queue.push(target.right);\n            }\n\n            visited.push(target.value);\n        }\n\n        return visited;\n    }\n\n    dfsPreOrder(){\n        var visited = [];\n        if(!this.root) return visited;\n\n        var current = this.root;\n        \n        traverse(current);\n\n        function traverse(currentNode){\n            //if(!currentNode) return [];\n\n            visited.push(currentNode.value);\n            \n            if(currentNode.left){\n                traverse(currentNode.left);    \n            }\n\n            if(currentNode.right){\n                traverse(currentNode.right);    \n            }\n        }\n\n        return visited;\n    }\n\n\n\n    dfsPostOrder(){\n        var visited = [];\n        if(!this.root) return visited;\n\n        var current = this.root;\n        \n        traverse(current);\n\n        function traverse(currentNode){\n            //if(!currentNode) return [];\n            if(currentNode.left){\n                traverse(currentNode.left);    \n            }\n\n            if(currentNode.right){\n                traverse(currentNode.right);    \n            }\n\n            visited.push(currentNode.value);\n        }\n\n        return visited;\n    }\n\n\n\n\n    dfsInOrder(){\n        var visited = [];\n        if(!this.root) return visited;\n\n        var current = this.root;\n        \n        traverse(current);\n\n        function traverse(currentNode){\n            //if(!currentNode) return [];\n            if(currentNode.left){\n                traverse(currentNode.left);    \n            }\n            \n            visited.push(currentNode.value);\n\n            if(currentNode.right){\n                traverse(currentNode.right);    \n            }\n\n        }\n\n        return visited;\n    }\n\n\n}\n\nvar tree = new BinarySearchTree();\ntree.root = new Node(10);\ntree.insert(6);\ntree.insert(15);\ntree.insert(3);\ntree.insert(8);\ntree.insert(20);"
  },
  {
    "name": "Heap.js",
    "content": "class MaxBinaryHeap{\n    constructor(){\n        this.values = [];\n    }\n\n    insert(val){\n        this.values.push(val);\n        var index = this.values.length - 1;\n        \n        var parentIndex = Math.floor((index - 1) / 2);\n\n        while(this.values[index] > this.values[parentIndex]){\n  \n            var temp = this.values[parentIndex];\n            this.values[parentIndex] = this.values[index];\n            this.values[index] = temp;\n            index = parentIndex;\n            parentIndex = Math.floor((index - 1) / 2);\n\n        }\n\n        return this.values;\n    }\n\n\n    remove(){\n        var oldRoot = this.values[0];\n        this.values[0] = this.values[this.values.length - 1];\n        this.values.pop();\n        \n        var index = 0;\n        var childrenLeftIndex = Math.floor(2 * index + 1);\n        var childrenRightIndex = Math.floor(2 * index + 2);\n\n        \n        while(this.values[index] < this.values[childrenLeftIndex] || \n                this.values[index] < this.values[childrenRightIndex])\n        {\n            console.log(\"index: \" + this.values[index]);\n            console.log(\"left: \" + this.values[childrenLeftIndex]);\n            console.log(\"right: \" + this.values[childrenRightIndex]);\n\n            if(this.values[childrenLeftIndex] > this.values[childrenRightIndex] \n            || this.values[childrenRightIndex] === undefined){\n                var temp = this.values[index];\n                this.values[index] = this.values[childrenLeftIndex];\n                this.values[childrenLeftIndex] = temp;\n                index = childrenLeftIndex;\n            }else{\n                var temp = this.values[index];\n                this.values[index] = this.values[childrenRightIndex];\n                this.values[childrenRightIndex] = temp;\n                index = childrenRightIndex;\n            }\n\n            childrenLeftIndex = Math.floor(2 * index + 1);\n            childrenRightIndex = Math.floor(2 * index + 2);\n             \n        }\n        console.log(\"updated value is \" + this.values);\n        return oldRoot;\n    }\n\n\n}\n\n\n\nvar heap = new MaxBinaryHeap();\n// heap.insert(41);\n// heap.insert(39);\n// heap.insert(33);\n// heap.insert(18);\n// heap.insert(27);\n// heap.insert(12);\nheap.insert(70);\nheap.insert(67);\nheap.insert(65);\nheap.insert(45);\nheap.insert(58);\nheap.insert(40);\nheap.insert(53);\nheap.insert(44);\nheap.insert(15);\nheap.insert(31);"
  },
  {
    "name": "PriorityQueue.js",
    "content": "class Node{\n    constructor(val, priority){\n        this.val = val;\n        this.priority = priority;\n    }\n}\n\nclass PriorityQueue{\n    constructor(){\n        this.values = [];\n    }\n\n    enqueue(val, pri){\n        var newNode = new Node(val, pri);\n\n        this.values.push(newNode);\n        var index = this.values.length - 1;\n        \n        var parentIndex = Math.floor((index - 1) / 2);\n        \n\n        while(this.values[index] && this.values[parentIndex] && \n        (this.values[index].priority < this.values[parentIndex].priority)){\n  \n            var temp = this.values[parentIndex];\n            this.values[parentIndex] = this.values[index];\n            this.values[index] = temp;\n            index = parentIndex;\n            parentIndex = Math.floor((index - 1) / 2);\n\n        }\n\n        return this.values;\n    }\n\n\n    dequeue(){\n\n        var oldRoot = this.values[0];\n        this.values[0] = this.values[this.values.length - 1];\n        this.values.pop();\n        \n        var index = 0;\n        var childrenLeftIndex = Math.floor(2 * index + 1);\n        var childrenRightIndex = Math.floor(2 * index + 2);\n\n        \n        while((this.values[index] && this.values[childrenLeftIndex] && this.values[childrenRightIndex]) && \n        (this.values[index].priority > this.values[childrenLeftIndex].priority || \n                this.values[index].priority > this.values[childrenRightIndex].priority))\n        {\n            console.log(\"index: \" + this.values[index]);\n            console.log(\"left: \" + this.values[childrenLeftIndex]);\n            console.log(\"right: \" + this.values[childrenRightIndex]);\n            \n            if(this.values[childrenLeftIndex].priority <= this.values[childrenRightIndex].priority \n            || this.values[childrenRightIndex].priority === undefined){\n                var temp = this.values[index];\n                this.values[index] = this.values[childrenLeftIndex];\n                this.values[childrenLeftIndex] = temp;\n                index = childrenLeftIndex;\n            }else{\n                var temp = this.values[index];\n                this.values[index] = this.values[childrenRightIndex];\n                this.values[childrenRightIndex] = temp;\n                index = childrenRightIndex;\n            }\n\n            childrenLeftIndex = Math.floor(2 * index + 1);\n            childrenRightIndex = Math.floor(2 * index + 2);\n             \n        }\n        console.log(\"updated value is \" + this.values);\n        return oldRoot;\n    }\n\n\n}\n\n\n\nvar queue = new PriorityQueue();\nqueue.enqueue(\"fever\", 1)\nqueue.enqueue(\"burnt\", 0)\nqueue.enqueue(\"vomiting\", 2)\nqueue.enqueue(\"sleepy\", 3)\nqueue.enqueue(\"cut\", 2)\n// heap.insert(41);\n// heap.insert(39);\n// heap.insert(33);\n// heap.insert(18);\n// heap.insert(27);\n// heap.insert(12);\n"
  },
  {
    "name": "HashFunction",
    "content": "// function hash(key, arrayLen){\n//     let total = 0;\n//     let WEIRD_PRIME = 31;\n//     for (let i = 0; i < Math.min(key.length, 100); i++){\n//         let char = key[i];\n//         let value = char.charCodeAt(0) - 96;\n//         total = (total * WEIRD_PRIME + value) % arrayLen;\n//     }\n//     return total;\n// }\n\n\nclass HashTable{\n    constructor(size=5){\n        this.keyMap = new Array(size);\n    }\n\n    _hash(key){\n        let total = 0;\n        let WEIRD_PRIME = 31;\n        for(let i = 0; i < Math.min(key.length, 100); i++){\n            let char = key[i];\n            let value = char.charCodeAt(0) - 96;\n            total = (total * WEIRD_PRIME + value) % this.keyMap.length;\n        }\n        return total;\n    }\n\n    set(key, value){\n        var hashKey = this._hash(key);\n        if(!this.keyMap[hashKey]){\n            this.keyMap[hashKey] = [];\n        }\n\n        this.keyMap[hashKey].push([key, value]);\n\n        return this;\n    }\n\n    get(key){\n        var hashKey = this._hash(key);\n        \n        var arrayGet = this.keyMap[hashKey];\n        var result;\n\n        if(arrayGet){\n//             console.log(\"arrayGet: \", arrayGet);\n            arrayGet.forEach(element => \n                {\n//                     console.log(\"element: \", element);\n                    if(element[0] === key){\n                        result = element;\n                    }\n                }\n            );\n        }\n\n       return result;\n    }\n\n\n    \n    keys(){\n        var temp = [];\n        var temp2 = [];\n        var result = [];\n        for(var i = 0; i < this.keyMap.length; i++){\n            var temp = temp.concat(this.keyMap[i]);\n        }\n        for(var i = 0; i < temp.length; i++){\n            if(temp[i]){\n                temp2 = temp2.concat(temp[i]);\n            }  \n        }\n\n        for(var i = 0; i < temp2.length; i+=2){\n            if(!result.includes(temp2[i])){\n                result.push(temp2[i]);\n            }  \n        }\n        return result;\n    }\n\n\n    values(){\n        var temp = [];\n        var temp2 = [];\n        var result = [];\n        for(var i = 0; i < this.keyMap.length; i++){\n            var temp = temp.concat(this.keyMap[i]);\n        }\n        for(var i = 0; i < temp.length; i++){\n            if(temp[i]){\n                temp2 = temp2.concat(temp[i]);\n            }  \n        }\n\n        for(var i = 1; i < temp2.length; i+=2){\n            result.push(temp2[i]);\n        }\n        return result;\n    }\n\n\n\n}\n\n\n\nvar hashTable = new HashTable();\nhashTable.set(\"elise\", \"queen\");\nhashTable.set(\"pink\", \"#00123\");\nhashTable.set(\"table\", \"brown\");\nhashTable.set(\"monkey\", \"banana\");\nhashTable.set(\"tele\", \"baby\");\nhashTable.set(\"monkey\", \"banana2\");\n\n\n"
  },
  {
    "name": "Graph.js",
    "content": "class Graph{\n    constructor(){\n        this.adjacencyList = {};\n    }\n\n    addVertex(val){\n        if(!val) return undefined\n        if(!this.adjacencyList[val]) this.adjacencyList[val] = [];\n        return this;\n    }\n\n    addEdge(vertex1, vertex2){\n        this.adjacencyList[vertex1].push(vertex2);\n        this.adjacencyList[vertex2].push(vertex1);\n\n        return this;\n    }\n\n    removeEdge(v1, v2){\n//         for(var i = 0; i < this.adjacencyList[v1].length; i++){\n//             if(this.adjacencyList[v1][i] === v2){\n//                 this.adjacencyList[v1].splice(i,1);\n//             }\n//         }\n\n        this.adjacencyList[v1] = this.adjacencyList[v1].filter(v => v !== v2);\n        this.adjacencyList[v2] = this.adjacencyList[v2].filter(v => v !== v1);\n\n//         for(var i = 0; i < this.adjacencyList[v2].length; i++){\n//             if(this.adjacencyList[v2][i] === v1){\n//                 this.adjacencyList[v2].splice(i,1);\n//             }\n//         }\n \n        return this;\n    }\n\n    removeVertex(v1){\n        for(var i = 0; i < this.adjacencyList[v1].length; i++){\n            var tempKey = this.adjacencyList[v1][i];\n             this.adjacencyList[tempKey] = this.adjacencyList[tempKey].filter(v => v != v1);\n//            this.removeEdge(v1, this.adjacencyList[v1][i]);\n        }\n        delete this.adjacencyList[v1];\n        return this;\n    }\n\n// Depth First Search\n     dfsRecur(startingV1){\n        var visited = {};\n        var result = [];\n\n        visitVertex.call(this, startingV1);\n\n        function visitVertex(v1Key){\n\n            if(!v1Key) return null;\n            visited[v1Key] = true;\n            result.push(v1Key);\n            \n            var keyNext;\n\n            console.log(\"goody\");\n\n            for(var i = 0; i < this.adjacencyList[v1Key].length; i++){\n                keyNext = this.adjacencyList[v1Key][i];\n                if(!visited[keyNext]){\n                    visitVertex.call(this, keyNext);;\n                }\n            }\n        }\n\n        return result;\n    }\n\n\n\n    dfsiterative(starting){\n        var visited = {};\n        var result = [];\n        var stack = [];\n        stack.push(starting);\n\n        while(stack.length > 0){\n            var currentVert = stack.pop();\n            console.log(\"this.adjacencyList[currentVert]:\" , this.adjacencyList[currentVert]);\n            if(!visited[currentVert]){\n\n                visited[currentVert] = true;\n                result.push(currentVert);\n\n                this.adjacencyList[currentVert].forEach(v1 => {\n\n                stack.push(v1);\n\n                })\n\n            }\n            \n            \n\n        }\n\n        \n\n\n        return result;\n    }\n\n\n\n//Breadth first Search\n    bfsiterative(starting){\n        var visited = {};\n        var result = [];\n        var stack = [];\n        stack.push(starting);\n\n        while(stack.length > 0){\n            var currentVert = stack.shift();\n            console.log(\"this.adjacencyList[currentVert]:\" , this.adjacencyList[currentVert]);\n            if(!visited[currentVert]){\n\n                visited[currentVert] = true;\n                result.push(currentVert);\n\n                this.adjacencyList[currentVert].forEach(v1 => {\n\n                stack.push(v1);\n\n                })\n\n            }\n            \n            \n\n        }\n\n        \n\n\n        return result;\n    }\n\n\n}\n\n\nvar g = new Graph();\n// g.addVertex(\"Michael\");\n// g.addVertex(\"Maria\");\n// g.addVertex(\"Elise\");\n// g.addEdge(\"Maria\", \"Michael\");\n// g.addEdge(\"Maria\", \"Elise\");\n// g.addEdge(\"Michael\", \"Elise\");\ng.addVertex(\"A\")\ng.addVertex(\"B\")\ng.addVertex(\"C\")\ng.addVertex(\"D\")\ng.addVertex(\"E\")\ng.addVertex(\"F\")\n\ng.addEdge(\"A\", \"B\")\ng.addEdge(\"A\", \"C\")\ng.addEdge(\"B\", \"D\")\ng.addEdge(\"C\", \"E\")\ng.addEdge(\"D\", \"E\")\ng.addEdge(\"D\", \"F\")\ng.addEdge(\"E\", \"F\")"
  }
]